[{"D:\\Projects\\docker\\todos-stack\\front-end\\src\\index.js":"1","D:\\Projects\\docker\\todos-stack\\front-end\\src\\reportWebVitals.js":"2","D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Login.jsx":"3","D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Signup.jsx":"4","D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Home.jsx":"5","D:\\Projects\\docker\\todos-stack\\front-end\\src\\util\\auth.js":"6","D:\\Projects\\docker\\todos-stack\\front-end\\src\\components\\Account.jsx":"7","D:\\Projects\\docker\\todos-stack\\front-end\\src\\components\\Todo.jsx":"8","D:\\Projects\\docker\\todos-stack\\front-end\\src\\App.jsx":"9"},{"size":478,"mtime":1612273061086,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":5287,"mtime":1612304082239,"results":"13","hashOfConfig":"11"},{"size":5208,"mtime":1612280982308,"results":"14","hashOfConfig":"11"},{"size":4242,"mtime":1612294061290,"results":"15","hashOfConfig":"11"},{"size":167,"mtime":1612285132560,"results":"16","hashOfConfig":"11"},{"size":6608,"mtime":1612297479049,"results":"17","hashOfConfig":"11"},{"size":10384,"mtime":1612364694190,"results":"18","hashOfConfig":"11"},{"size":851,"mtime":1612365251378,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1f08lsy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\docker\\todos-stack\\front-end\\src\\index.js",[],["42","43"],"D:\\Projects\\docker\\todos-stack\\front-end\\src\\reportWebVitals.js",[],"D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Login.jsx",["44"],"import React, { Component } from 'react';\r\nimport { Avatar, Button, CircularProgress, Container, CssBaseline, Grid, Link, TextField, Typography, withStyles } from '@material-ui/core';\r\nimport { LockOutlined as LockOutlinedIcon } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  customError: {\r\n    color: 'red',\r\n    fontSize: '0.8rem',\r\n    marginTop: 10\r\n  },\r\n  progess: {\r\n    position: 'absolute'\r\n  }\r\n});\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      errors: [],\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.UI.errors) {\r\n      this.setState({\r\n        errors: nextProps.UI.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // fetch('http://localhost:5000/auth/login', {\r\n    //   method: 'POST',\r\n    //   // mode: 'cors',\r\n    //   headers: {\r\n    //     'Content-Type': 'application/json'\r\n    //   },\r\n    //   body: JSON.stringify({ email: 'ash@contoso.it', password: 'foobar' })\r\n    // })\r\n    //   .then(res => res.json())\r\n    //   .then(\r\n    //     data => {\r\n    //       console.log(data);\r\n    //     },\r\n    //     (err) => {\r\n    //       this.setState({\r\n    //         error: err\r\n    //       });\r\n    //     }\r\n    //   )\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n    const userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\n\r\n    fetch('http://localhost:5000/auth/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData)\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        localStorage.setItem('AuthToken', `${data.auth_token}`);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n    // axios\r\n    //   .post('http://localhost:5000/auth/login', userData)\r\n    //   .then((response) => {\r\n    //     localStorage.setItem('AuthToken', `${response.data.token}`);\r\n    //     this.setState({\r\n    //       loading: false\r\n    //     });\r\n    //     this.props.history.push('/');\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     this.setState({\r\n    //       errors: error.response.data,\r\n    //       loading: false\r\n    //     });\r\n    //   })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { errors, loading } = this.state;\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Login\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              helperText={errors.email}\r\n              error={errors.email ? true : false}\r\n              onChange={this.handleChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              helperText={errors.password}\r\n              error={errors.password ? true : false}\r\n              onChange={this.handleChange}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick={this.handleSubmit}\r\n              disabled={loading || !this.state.email || !this.state.password}\r\n            >\r\n              Sign In\r\n              {loading && <CircularProgress size={30} className={classes.progress} />}\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link href=\"signup\" variant=\"body2\">\r\n                  {\"Don't have and account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n            {errors.general && (\r\n              <Typography variant=\"body2\" className={classes.customError}>\r\n                {errors.general}\r\n              </Typography>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Login);\r\n","D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Signup.jsx",[],"D:\\Projects\\docker\\todos-stack\\front-end\\src\\pages\\Home.jsx",[],"D:\\Projects\\docker\\todos-stack\\front-end\\src\\util\\auth.js",[],"D:\\Projects\\docker\\todos-stack\\front-end\\src\\components\\Account.jsx",["45"],"import { Button, Card, CardActions, CardContent, CircularProgress, Divider, Grid, TextField, Typography, withStyles } from '@material-ui/core';\r\nimport { CloudUpload as CloudUploadIcon } from '@material-ui/icons';\r\nimport axios from 'axios';\r\nimport clsx from 'clsx';\r\nimport React, { Component } from 'react';\r\nimport { authMiddleware } from '../util/auth';\r\n\r\nconst styles = (theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3)\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  root: {},\r\n  details: {\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    height: 110,\r\n    width: 100,\r\n    flexShrink: 0,\r\n    flexGrow: 0\r\n  },\r\n  locationText: {\r\n    paddingLeft: '15px'\r\n  },\r\n  buttonProperty: {\r\n    position: 'absolute',\r\n    top: '50%'\r\n  },\r\n  uiProgess: {\r\n    position: 'fixed',\r\n    zIndex: '1000',\r\n    height: '31px',\r\n    width: '31px',\r\n    left: '50%',\r\n    top: '35%'\r\n  },\r\n  progess: {\r\n    position: 'absolute'\r\n  },\r\n  uploadButton: {\r\n    marginLeft: '8px',\r\n    margin: theme.spacing(1)\r\n  },\r\n  customError: {\r\n    color: 'red',\r\n    fontSize: '0.8rem',\r\n    marginTop: 10\r\n  },\r\n  submitButton: {\r\n    marginTop: '10px'\r\n  }\r\n});\r\n\r\nclass Account extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      uiLoading: true,\r\n      buttonLoading: false,\r\n      imageError: ''\r\n    };\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    authMiddleware(this.props.history);\r\n    const authToken = localStorage.getItem('AuthToken');\r\n    axios.defaults.headers.common = { Autorization: `${authToken}` };\r\n    axios\r\n      .get('http://localhost:5000/')\r\n      .then(resp => {\r\n        console.log(resp.data);\r\n        this.setState({\r\n          name: 'Kurt Opel',\r\n          email: 'kurt@kurtopel.com',\r\n          uiLoading: false\r\n        });\r\n      })\r\n      .catch(err => {\r\n        if (err.response.status === 403) {\r\n          this.props.history.push('/login');\r\n        }\r\n        console.log(err);\r\n        this.setState({ errorMsg: 'Error in retrieving the data' });\r\n      });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleImageChange = (event) => { }\r\n\r\n  profilePictureHandler = (event) => { }\r\n\r\n  updateFormValues = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      buttonLoading: true\r\n    });\r\n    authMiddleware(this.props.history);\r\n    const authToken = localStorage.getItem('AuthToken');\r\n    axios.defaults.headers.common = { Authorization: `${authToken}` };\r\n    const formRequest = {\r\n      name: this.state.name,\r\n      email: this.state.email\r\n    };\r\n    axios\r\n      .get('http://localhost:5000/')\r\n      .then(() => {\r\n        this.setState({ buttonLoading: false });\r\n      })\r\n      .catch(err => {\r\n        if (err.response.status === 403) {\r\n          this.props.history.push('/login');\r\n        }\r\n        console.log(err);\r\n        this.setState({ buttonLoading: false });\r\n      });\r\n\r\n  }\r\n\r\n  render() {\r\n    const { classes, ...rest } = this.props;\r\n    if (this.state.uiLoading === true) {\r\n      return (\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          {this.state.uiLoading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n        </main>\r\n      )\r\n    } else {\r\n      return (\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Card {...rest} className={clsx(classes.root, classes)}>\r\n            <CardContent>\r\n              <div className={classes.details}>\r\n                <div>\r\n                  <Typography className={classes.locationText} gutterBottom variant=\"h4\">\r\n                    {this.state.name}\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    size=\"small\"\r\n                    startIcon={<CloudUploadIcon />}\r\n                    className={classes.uploadButton}\r\n                    onClick={this.profilePictureHandler}\r\n                  >\r\n                    Upload Photo\r\n                  </Button>\r\n                  <input type=\"file\" onChange={this.handleImageChange} />\r\n                  {this.state.imageError ? (\r\n                    <div className={classes.customError}>\r\n                      {' '}\r\n                      Wrong Image Format || Supported Format are PNG and JPG\r\n                    </div>\r\n                  ) : (\r\n                      false\r\n                    )}\r\n                </div>\r\n              </div>\r\n              <div className={classes.progress} />\r\n            </CardContent>\r\n            <Divider />\r\n          </Card>\r\n          <br />\r\n          <Card {...rest} className={clsx(classes.root, classes)}>\r\n            <form autoComplete=\"off\" noValidate>\r\n              <Divider />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item md={6} xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Name\"\r\n                      margin=\"dense\"\r\n                      name=\"name\"\r\n                      variant=\"outlined\"\r\n                      value={this.state.name}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={6} xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Email\"\r\n                      margin=\"dense\"\r\n                      name=\"email\"\r\n                      variant=\"outlined\"\r\n                      value={this.state.email}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n              <Divider />\r\n              <CardActions />\r\n            </form>\r\n          </Card>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n            className={classes.submitButton}\r\n            onClick={this.updateFormValues}\r\n            disabled={\r\n              this.state.buttonLoading ||\r\n              !this.state.name ||\r\n              !this.state.email\r\n            }\r\n          >\r\n            Save Details\r\n            {this.state.buttonLoading && <CircularProgress size={30} className={classes.progress} />}\r\n          </Button>\r\n        </main>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Account);","D:\\Projects\\docker\\todos-stack\\front-end\\src\\components\\Todo.jsx",["46","47"],"import { AppBar, Button, Card, CardActions, CardContent, CircularProgress, Dialog, DialogContent as MuiDialogContent, DialogTitle as MuiDialogTitle, Grid, IconButton, Slide, TextField, Toolbar, Typography, withStyles } from '@material-ui/core'\r\nimport { AddCircle as AddCircleIcon, Close as CloseIcon } from '@material-ui/icons';\r\nimport axios from 'axios';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport React, { Component } from 'react'\r\nimport { authMiddleware } from '../util/auth';\r\n\r\nconst API_URI = 'http://localhost:5000'\r\n\r\nconst styles = (theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1\r\n  },\r\n  submitButton: {\r\n    display: 'block',\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    position: 'absolute',\r\n    top: 14,\r\n    right: 10\r\n  },\r\n  floatingButton: {\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    right: 0\r\n  },\r\n  form: {\r\n    width: '98%',\r\n    marginLeft: 13,\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  root: {\r\n    minWidth: 470\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)'\r\n  },\r\n  pos: {\r\n    marginBottom: 12\r\n  },\r\n  uiProgess: {\r\n    position: 'fixed',\r\n    zIndex: '1000',\r\n    height: '31px',\r\n    width: '31px',\r\n    left: '50%',\r\n    top: '35%'\r\n  },\r\n  dialogeStyle: {\r\n    maxWidth: '50%'\r\n  },\r\n  viewRoot: {\r\n    margin: 0,\r\n    padding: theme.spacing(2)\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500]\r\n  }\r\n}\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      todos: '',\r\n      title: '',\r\n      body: '',\r\n      todoId: '',\r\n      errors: [],\r\n      open: false,\r\n      uiLoading: true,\r\n      buttonType: '',\r\n      viewOpen: false\r\n    };\r\n\r\n    this.deleteTodoHandler = this.deleteTodoHandler.bind(this);\r\n    this.handleEditClickOpen = this.handleEditClickOpen.bind(this);\r\n    this.handleViewOpen = this.handleViewOpen.bind(this);\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    authMiddleware(this.props.history);\r\n    const authToken = localStorage.getItem('AuthToken');\r\n    axios.defaults.headers.common = { Authorization: `${authToken}` }\r\n    axios\r\n      .get('http://localhost:5000/todos')\r\n      .then(resp => {\r\n        console.log(resp.data)\r\n        this.setState({\r\n          todos: resp.data,\r\n          uiLoading: false\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n\r\n  }\r\n\r\n  deleteTodoHandler(data) {\r\n    authMiddleware(this.props.history);\r\n    const authToken = localStorage.getItem('AuthToken');\r\n    axios.defaults.headers.common = { Authorization: `${authToken}` }\r\n    let todoId = data.todo.id;\r\n    axios\r\n      .delete(`${API_URI}/todos/${todoId}`)\r\n      .then(() => {\r\n        window.location.reload();\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  handleEditClickOpen(data) {\r\n    this.setState({\r\n      title: data.todo.title,\r\n      todoId: data.todo.id,\r\n      buttonType: 'Edit',\r\n      open: true\r\n    })\r\n  }\r\n  handleViewOpen(data) {\r\n    this.setState({\r\n      title: data.todo.title,\r\n      viewOpen: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const DialogTitle = withStyles(styles)(props => {\r\n      const { children, classes, onClose, ...other } = props;\r\n      return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n          <Typography variant=\"h6\">{children}</Typography>\r\n          {onClose ? (\r\n            <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          ) : null}\r\n        </MuiDialogTitle>\r\n      );\r\n    });\r\n\r\n    const DialogContent = withStyles(theme => ({\r\n      viewRoot: {\r\n        padding: theme.spacing(2)\r\n      }\r\n    }))(MuiDialogContent);\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = this.props;\r\n    const { open, errors, viewOpen } = this.state;\r\n\r\n    const handleClickOpen = () => {\r\n      this.setState({\r\n        todoId: '',\r\n        title: '',\r\n        body: '',\r\n        buttonType: '',\r\n        open: true\r\n      })\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n      authMiddleware(this.props.history);\r\n      event.preventDefault();\r\n      const userTodo = {\r\n        title: this.state.title\r\n      }\r\n      let options = {};\r\n      if (this.state.buttonType === 'Edit') {\r\n        options = {\r\n          url: `${API_URI}/todos/${this.state.todoId}`,\r\n          method: 'put',\r\n          data: userTodo\r\n        };\r\n      } else {\r\n        options = {\r\n          url: `${API_URI}/todos`,\r\n          method: 'post',\r\n          data: userTodo\r\n        };\r\n      }\r\n      const authToken = localStorage.getItem('AuthToken');\r\n      axios.defaults.headers.common = { Authorization: `${authToken}` }\r\n      axios(options)\r\n        .then(() => {\r\n          this.setState({ open: false });\r\n          window.location.reload();\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            open: true,\r\n            errors: err.respoonse.data\r\n          })\r\n        })\r\n    };\r\n\r\n    const handleViewClose = () => {\r\n      this.setState({ viewOpen: false })\r\n    };\r\n\r\n    const handleClose = () => {\r\n      this.setState({ open: false })\r\n    };\r\n\r\n    if (this.state.uiLoading === true) {\r\n      return (\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          {this.state.uiLoading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n        </main>\r\n      )\r\n    } else {\r\n      return (\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <IconButton\r\n            className={classes.floatingButton}\r\n            color=\"primary\"\r\n            aria-label=\"Add Todo\"\r\n            onClick={handleClickOpen}\r\n          >\r\n            <AddCircleIcon style={{ fontSize: 60 }} />\r\n          </IconButton>\r\n          <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n            <AppBar className={classes.AppBar}>\r\n              <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n                  <CloseIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                  {this.state.buttonType === 'Edit' ? 'Edit Todo' : 'Create Todo'}\r\n                </Typography>\r\n                <Button\r\n                  autoFocus\r\n                  color=\"inherit\"\r\n                  onClick={handleSubmit}\r\n                  className={classes.submitButton}\r\n                >\r\n                  {this.state.buttonType === 'Edit' ? 'Save' : 'Submit'}\r\n                </Button>\r\n              </Toolbar>\r\n            </AppBar>\r\n            <form className={classes.form} noValidate>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"todoTitle\"\r\n                    label=\"Todo Title\"\r\n                    name=\"title\"\r\n                    autoComplete=\"todoTitle\"\r\n                    helperText={errors.title}\r\n                    value={this.state.title}\r\n                    error={errors.title ? true : false}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Dialog>\r\n          <Grid container spacing={2}>\r\n            {this.state.todos.map(todo => (\r\n              <Grid key={todo.id} item xs={12} sm={6}>\r\n                <Card className={classes.root} variant=\"outlined\">\r\n                  <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                      {todo.title}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                      {dayjs(todo.created_at).fromNow()}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                      {todo.items[0]?.name}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Button size=\"small\" color=\"primary\" onClick={() => this.handleViewOpen({ todo })}>\r\n                      {' '}\r\n                      View{' '}\r\n                    </Button>\r\n                    <Button size=\"small\" color=\"primary\" onClick={() => this.handleEditClickOpen({ todo })}>\r\n                      Edit\r\n                    </Button>\r\n                    <Button size=\"small\" color=\"primary\" onClick={() => this.deleteTodoHandler({ todo })}>\r\n                      Delete\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <Dialog\r\n            onClose={handleViewClose}\r\n            aria-labeledby=\"customized-dialog-title\"\r\n            open={viewOpen}\r\n            fullWidth\r\n            classes={{ paperFullWidth: classes.dialogeStyle }}\r\n          >\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleViewClose}>\r\n              {this.state.title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <TextField\r\n                fullWidth\r\n                id=\"todoDetails\"\r\n                name=\"body\"\r\n                multiline\r\n                readonly\r\n                rows={1}\r\n                rowsMax={25}\r\n                value={this.state.body}\r\n                InputProps={{\r\n                  disableUnderline: true\r\n                }}\r\n              />\r\n            </DialogContent>\r\n          </Dialog>\r\n        </main>\r\n      )\r\n    }\r\n  }\r\n}\r\nexport default withStyles(styles)(Todo);","D:\\Projects\\docker\\todos-stack\\front-end\\src\\App.jsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":13},{"ruleId":"52","severity":1,"message":"56","line":110,"column":11,"nodeType":"54","messageId":"55","endLine":110,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":39,"column":3,"nodeType":"59","messageId":"60","endLine":39,"endColumn":10},{"ruleId":"61","severity":1,"message":"62","line":324,"column":13,"nodeType":"63","endLine":324,"endColumn":53},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'formRequest' is assigned a value but never used.","no-dupe-keys","Duplicate key 'toolbar'.","ObjectExpression","unexpected","jsx-a11y/aria-props","aria-labeledby: This attribute is an invalid ARIA attribute. Did you mean to use aria-labelledby?","JSXAttribute","no-global-assign","no-unsafe-negation"]